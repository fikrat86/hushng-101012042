substitutions:
  _PROJECT_ID: semester-2-408906
  _SERVICE_NAME: gcp-pipeline            # Cloud Run service name (must use hyphens, lowercase)
  _REGION: us-central1                   # Deployment region
  _REPO: us-central1-docker.pkg.dev/semester-2-408906/demo-0000000000
  _IMAGE_NAME: gcp-pipeline              # Use hyphenated image name for consistency
  _MEMORY: 512Mi                         # Cloud Run memory limit
  _CONCURRENCY: 80                       # Cloud Run request concurrency
  _CPU: 1                                # vCPU allocation
  _ALLOW_UNAUTH: "false"                # Set to "true" to allow public access

steps:
  # 0. Defensive: ensure Dockerfile exists (catches earlier failure mode)
  - name: alpine
    id: Verify Dockerfile
    entrypoint: sh
    args: ['-c', 'test -f Dockerfile || { echo "ERROR: Dockerfile missing"; exit 1; }']

  # 1. Install dependencies (including dev) for running tests & linting
  - name: 'gcr.io/cloud-builders/npm'
    id: NPM Install
    args: ['ci']

  # 2. Run tests (will fail the build if tests fail). Adjust or remove if not desired.
  - name: 'gcr.io/cloud-builders/npm'
    id: Tests
    args: ['test', '--', '--ci', '--runInBand']

  # 3. (Optional) Lint / format check placeholder (uncomment if you add eslint)
  # - name: 'gcr.io/cloud-builders/npm'
  #   id: Lint
  #   args: ['run', 'lint']

  # 4. Build minimal production image (only prod deps inside final image via Dockerfile)
  - name: 'gcr.io/cloud-builders/docker'
    id: Build
    args:
      - build
      - -f
      - Dockerfile
      - -t
      - '${_REPO}/${_IMAGE_NAME}:${SHORT_SHA}'
      - -t
      - '${_REPO}/${_IMAGE_NAME}:latest'
      - .
  - name: 'gcr.io/cloud-builders/docker'
    id: Push SHA Tag
    args: ['push', '${_REPO}/${_IMAGE_NAME}:${SHORT_SHA}']
  - name: 'gcr.io/cloud-builders/docker'
    id: Push Latest Tag
    args: ['push', '${_REPO}/${_IMAGE_NAME}:latest']
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: Deploy
    entrypoint: bash
    args:
      - -c
      - |
        if [ "${_ALLOW_UNAUTH}" = "true" ]; then
          AUTH_FLAG="--allow-unauthenticated";
        else
          AUTH_FLAG="--no-allow-unauthenticated";
        fi
        echo "Deploying service ${_SERVICE_NAME} with image ${_REPO}/${_IMAGE_NAME}:${SHORT_SHA}";
        gcloud run deploy "${_SERVICE_NAME}" \
          --image "${_REPO}/${_IMAGE_NAME}:${SHORT_SHA}" \
          --region "${_REGION}" \
          --platform managed \
          --memory "${_MEMORY}" \
          --concurrency "${_CONCURRENCY}" \
          --cpu "${_CPU}" \
          --set-env-vars NODE_ENV=production \
          ${AUTH_FLAG} \
          --quiet
        echo "Deployment finished." 

images:
  - '${_REPO}/${_IMAGE_NAME}:${SHORT_SHA}'
  - '${_REPO}/${_IMAGE_NAME}:latest'

options:
  defaultLogsBucketBehavior: REGIONAL_USER_OWNED_BUCKET
  logging: CLOUD_LOGGING_ONLY
  machineType: E2_HIGHCPU_8

timeout: 900s

tags:
  - gcp-pipeline
  - nodejs
  - cloud-run